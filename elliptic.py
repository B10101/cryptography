def point_add(P, Q, a, p):
    x1, y1 = P
    x2, y2 = Q
    if P == (0, 0):
        return Q
    if Q == (0, 0):
        return P
    if P == Q:
        m = (3 * x1 * x1 + a) * pow(2 * y1, -1, p) % p
    else:
        m = (y2 - y1) * pow(x2 - x1, -1, p) % p
    x3 = (m * m - x1 - x2) % p
    y3 = (m * (x1 - x3) - y1) % p
    return x3, y3

def point_multiply(P, n, a, p):
    Q = (0, 0)
    while n > 0:
        if n % 2 == 1:
            Q = point_add(Q, P, a, p)
        P = point_add(P, P, a, p)
        n //= 2
    return Q

a = 4
b = 1
p = 19
P = (0, 1)
order = 19  # The order of the group is p (prime number)

points = []
current_point = P
for _ in range(order):
    points.append(current_point)
    current_point = point_add(current_point, P, a, p)

for point in points:
    print(point)

cardinality = len(points)
print("Cardinality of the subgroup generated by P:", cardinality)
